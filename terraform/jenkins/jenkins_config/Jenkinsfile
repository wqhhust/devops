pipeline {
  agent any
  environment {
    AWS_ACCOUNT_ID = "617815228888"
    AWS_DEFAULT_REGION = "us-east-2"
    IMAGE_REPO_NAME = "danielsite"
    REPO_URL = "https://github.com/wqhhust/javatest.git"
    IMAGE_TAG = "latest"
    REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
  }
  stages {
    stage("Logging into AWS ECR") {
      steps {
        script {
          sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        }
      }
    }

    stage('Cloning Git') {
      steps {
        checkout([
		$class: 'GitSCM',
		branches: [[name: '*/main']],
		doGenerateSubmoduleConfigurations: false,
		extensions: [[$class: 'CleanCheckout']],
		submoduleCfg: [],
		userRemoteConfigs: [[credentialsId: '', url:  "${REPO_URL}"]
        ]])
      }
    }

    // Building Docker images
    stage('Building image') {
      steps {
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }

    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
      steps {
        script {
          sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
          sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }

    stage("Get approval") {
        options {
            timeout(time:2, unit: 'MINUTES')
        }
        steps {
            input "Pleaes approval to deploy the new build"
        }
    }

    stage("Deploy") {
        steps {
            echo "TODO: deploy to AWS ECS"
        }
    }
  }
}
